package com.example.expensemanagement.service;

import com.example.expensemanagement.entity.Expense;
import com.example.expensemanagement.repository.ExpenseRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.within;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@ActiveProfiles("test")
@Transactional
class ExpenseServiceIntegrationTest {

    @Autowired
    private ExpenseService expenseService;

    @Autowired
    private ExpenseRepository expenseRepository;

    private Expense getTestExpense() {
        Expense testExpense = new Expense();
        testExpense.setDescription("Office supplies");
        testExpense.setSum(BigDecimal.valueOf(150.75));
        testExpense.setCurrency("USD");
        testExpense.setMoment(Instant.now().minus(1, ChronoUnit.DAYS));

        return testExpense;
    }

    @Test
    void saveExpense_shouldPersistWithAutoGeneratedId() {

        Expense testExpense =  getTestExpense();
        // When
        Expense savedExpense = expenseService.saveExpense(testExpense);
        
        // Then
        assertNotNull(savedExpense.getId(), "ID should be auto-generated");
        
        Optional<Expense> retrieved = expenseRepository.findById(savedExpense.getId());
        assertTrue(retrieved.isPresent(), "Expense should exist in database");
        assertEquals(testExpense.getDescription(), retrieved.get().getDescription());
    }

    @Test
    void saveExpense_shouldAutoSetTimestampWhenMissing() {
        // Given
         Expense testExpense =  getTestExpense();
        testExpense.setMoment(null);
        
        // When
        Expense savedExpense = expenseService.saveExpense(testExpense);
        
        // Then
        assertNotNull(savedExpense.getMoment(), "Timestamp should be auto-set");
        assertThat(savedExpense.getMoment()).isCloseTo(Instant.now(), within(1, ChronoUnit.SECONDS));
    }

    @Test
    void saveExpense_shouldPersistAllFieldsCorrectly() {
        // When
        Expense testExpense =  getTestExpense();
        Expense savedExpense = expenseService.saveExpense(testExpense);
        
        // Then
        Expense retrieved = expenseRepository.findById(savedExpense.getId()).orElseThrow();
        
        assertEquals(testExpense.getDescription(), retrieved.getDescription());
        assertEquals(testExpense.getSum(), retrieved.getSum());
        assertEquals(testExpense.getCurrency(), retrieved.getCurrency());
        assertEquals(testExpense.getMoment(), retrieved.getMoment());
    }
}
